(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{vE10:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return h}));var i=a("Fcif"),n=a("+I+c"),r=(a("mXGw"),a("/FXl")),o=a("TjRS"),s=(a("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/ml.mdx"}});var l={_frontmatter:s},c=o.a;function h(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)(c,Object(i.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"facial-detection-tracking-and-landmarking"},"Facial Detection, Tracking and Landmarking"),Object(r.b)("p",null,"The ML module performs facial detection, tracking, and landmarking (in that order) on the image input it receives. One can find all the functions related to image and facial processing in the Inference class in ",Object(r.b)("inlineCode",{parentName:"p"},"ml.py"),". The core logic is within the infer_image function at the bottom. It takes an image and transforms it, producing a tuple containing measurements about the face.  "),Object(r.b)("h2",{id:"inference"},"Inference"),Object(r.b)("p",null,"The inference process contains four steps, the first step is the initialisation process. The inference module relies heavily on dlib functions for much of its actual core actions, many of which need prior initialisation or preparation of some sort.  "),Object(r.b)("p",null,"The next part is where it actually takes in an image and begins the processing. It will look for a face in the image. If a face is not found, it will not go through with the remaining steps. Dlib functions performs the calculations for this part and this is probably the slowest part of the algorithm. Although there are other choices available online for this part, dlib is one of the most well known and most used.  "),Object(r.b)("p",null,"If it finds a face, it will take the cut out of the image that contains just the face and record its position. The algorithm does this so that it does not have to perform facial detection on every frame. This is because by recording past frames, we can actually use linear extrapolation to predict future face locations. Since facial detection is the slowest part in this entire algorithm, by being able to skip it occasionally, you can see noticeable performance boosts. In the current implementation, the algorithm skips every second frame and replaces it with this linear extrapolation approach.  "),Object(r.b)("p",null,"Once the algorithm detects a face, it crops and isolates the face so that it can then perform facial landmarking. This increases the accuracy and speed of the facial landmarking procedure tremendously. This process also takes advantage of an algorithm available through dlib that performs facial landmarking using 68 points.  "),Object(r.b)("p",null,"With the face landmarked, one can now use the points to calculate facial metrics.  "),Object(r.b)("p",null,"The entire process and algorithm is in the infer_image function at the bottom of ",Object(r.b)("inlineCode",{parentName:"p"},"ml.py"),".  "),Object(r.b)("h2",{id:"inference-output"},"Inference Output"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"infer_image(image)"),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"Input"),": 2D numpy array that represents an image",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"Output"),": tuple of elements"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"roll"),Object(r.b)("li",{parentName:"ul"},"pitch"),Object(r.b)("li",{parentName:"ul"},"yaw"),Object(r.b)("li",{parentName:"ul"},"ear_left"),Object(r.b)("li",{parentName:"ul"},"ear_right"),Object(r.b)("li",{parentName:"ul"},"mar"),Object(r.b)("li",{parentName:"ul"},"mdst"),Object(r.b)("li",{parentName:"ul"},"left_iris"),Object(r.b)("li",{parentName:"ul"},"right_iris")),Object(r.b)("h3",{id:"roll-pitch-yaw"},"Roll, Pitch, Yaw"),Object(r.b)("p",null,"These refer to the orientation of the head (in degrees). All three measurements start at a base line where 0 degrees is the subject staring straight into the camera."),Object(r.b)("h3",{id:"ear_left-ear_right"},"ear_left, ear_right"),Object(r.b)("p",null,"Eye aspect ratio or ear is a measurement of how open an eye is. Values usually range from 0 to 0.4 where closed is 0 and very open is 0.4."),Object(r.b)("h3",{id:"mar"},"mar"),Object(r.b)("p",null,"Mouth aspect ratio or mar is a measurement of how open the mouth is. Values usually range from 0 to 1 (although it will sometimes cross 1) where closed is 0 and open is 1.  "),Object(r.b)("h3",{id:"mdst"},"mdst"),Object(r.b)("p",null,"Mouth distance or mdst is a measure of the horizontal length of the mouth. (Think of it like a very wide smile versus a puckered kissing action). Values will usually range from 0.2 to 0.5 (although it may cross those boundaries on either side) where 0.2 is a very tight mouth and 0.5 is a very wide mouth."),Object(r.b)("h3",{id:"left_iris-right_iris"},"left_iris, right_iris"),Object(r.b)("p",null,"These two iris measurements are not actually numbers but instead an array or collection of four other numbers.  "),Object(r.b)("p",null,"The first two of which are the raw x and y coordinates of the iris in relation to the rest of the image. These two numbers are probably not going to be very useful for most cases except for debugging. The coordinate (0, 0) is the upper left hand of the image.  "),Object(r.b)("p",null,"The next two of which are the left and up ratio values of the pupil. These represent how much to any direction the iris is pointing. The left ratio of the eye determines how much to the left the eye is pointing where 0 is very left and 1 is very right. The up ratio of the eye determines how upwards the eye is pointing where 0 is very down and 1 is very up."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"*","Note"),": If it does not find a face, the function returns None instead."))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/ml.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-ml-mdx-3b84f0fb3ce7be7abbaf.js.map